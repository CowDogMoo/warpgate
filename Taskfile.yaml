---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

includes:
  docker:
    taskfile: "https://raw.githubusercontent.com/CowDogMoo/taskfile-templates/main/docker/Taskfile.yaml"
  github:
    taskfile: "https://raw.githubusercontent.com/CowDogMoo/taskfile-templates/main/github/Taskfile.yaml"
  packer:
    taskfile: "https://raw.githubusercontent.com/CowDogMoo/taskfile-templates/main/packer/Taskfile.yaml"
  pre-commit:
    taskfile: "https://raw.githubusercontent.com/CowDogMoo/taskfile-templates/main/pre-commit/Taskfile.yaml"
  secrets:
    taskfile: "https://raw.githubusercontent.com/CowDogMoo/taskfile-templates/main/secrets/Taskfile.yaml"
  terraform:
    taskfile: "https://raw.githubusercontent.com/CowDogMoo/taskfile-templates/main/terraform/Taskfile.yaml"
  renovate:
    taskfile: "https://raw.githubusercontent.com/CowDogMoo/taskfile-templates/main/renovate/Taskfile.yaml"

tasks:
  default:
    desc: "Run all CI tasks"
    cmds:
      - task: run-pre-commit

  run-pre-commit:
    desc: "Update, clear cache, and run pre-commit hooks"
    cmds:
      - task: pre-commit:update-hooks
      - task: pre-commit:clear-cache
      - task: pre-commit:run-hooks

  run-image-builder-action:
    desc: "Run GitHub Actions image-builder workflow using act. Optionally specify TEMPLATE"
    vars:
      TEMPLATE: '{{.TEMPLATE | default ""}}'
      IS_MAC_ARM: '{{if and (eq OS "Darwin") (eq ARCH "arm64")}}true{{else}}false{{end}}'
      ARCH_FLAG: '{{if eq .IS_MAC_ARM "true"}}--container-architecture linux/amd64{{end}}'
    cmds:
      - |
        # Clean up any existing act containers
        docker ps -q -f name=act-Image-Builder | xargs -r docker rm -f 2>/dev/null || true

        # Create a temporary secrets file with GITHUB_TOKEN if .secrets doesn't exist
        if [ ! -f .secrets ]; then
          echo "Warning: .secrets file not found. Creating temporary one with GITHUB_TOKEN=dummy for testing."
          echo "GITHUB_TOKEN=dummy" > .secrets.tmp
          SECRET_FILE=".secrets.tmp"
        else
          SECRET_FILE=".secrets"
        fi

        # Run act with appropriate arguments
        if [ -n "{{.TEMPLATE}}" ]; then
          echo '{"inputs":{"TEMPLATE":"{{.TEMPLATE}}"}}' > /tmp/github-event.json
          act -W .github/workflows/warpgate-image-builder.yaml {{.ARCH_FLAG}} -e /tmp/github-event.json --secret-file $SECRET_FILE
          EXIT_CODE=$?
          rm /tmp/github-event.json
        else
          act -W .github/workflows/warpgate-image-builder.yaml {{.ARCH_FLAG}} --secret-file $SECRET_FILE
          EXIT_CODE=$?
        fi

        # Clean up temporary files
        if [ "$SECRET_FILE" = ".secrets.tmp" ]; then
          rm .secrets.tmp
        fi

        exit $EXIT_CODE

  template-build:
    desc: "Build a template image from anywhere in the repo"
    env:
      PACKER_PATH: '{{.PACKER_CMD | default "packer"}}'
    cmds:
      - task: packer:cleanup-packer-manifest
        vars:
          MANIFEST_PATH: '{{.MANIFEST_PATH | default "./manifest.json"}}'
      - task: packer:packer-template-build
        vars:
          COMMAND: "build"
          TEMPLATE_NAME: "{{.TEMPLATE_NAME}}"
          TEMPLATE_DIR: '{{if .TEMPLATE_NAME}}blueprints/{{.TEMPLATE_NAME}}/packer_templates{{else}}{{.TEMPLATE_DIR | default "./"}}{{end}}'
          ONLY: '{{.ONLY | default ""}}'
          VARS: '{{.VARS | default ""}}'
          FORCE: '{{.FORCE | default "false"}}'

  template-init:
    desc: "Initialize a Packer template from anywhere in the repo"
    env:
      PACKER_PATH: '{{.PACKER_CMD | default "packer"}}'
    cmds:
      - task: packer:packer-init
        vars:
          TEMPLATE_NAME: "{{.TEMPLATE_NAME}}"
          TEMPLATE_DIR: '{{if .TEMPLATE_NAME}}blueprints/{{.TEMPLATE_NAME}}/packer_templates{{else}}{{.TEMPLATE_DIR | default "./"}}{{end}}'
          TEMPLATE: '{{.TEMPLATE | default ""}}'
          VARS: '{{.VARS | default ""}}'

  template-validate:
    desc: "Validate a template packer template from anywhere in the repo"
    cmds:
      - task: packer:_packer-base
        vars:
          COMMAND: "validate"
          TEMPLATE_NAME: "{{.TEMPLATE_NAME}}"
          VAR_FILE: '{{.VAR_FILE | default ""}}'

  template-push:
    desc: "Push multi-architecture Docker images using Packer manifest"
    requires:
      vars: ["NAMESPACE", "IMAGE_NAME", "GITHUB_TOKEN", "GITHUB_USER"]
    vars:
      REGISTRY: '{{ .REGISTRY | default "ghcr.io" }}'
      NAMESPACE: "{{ .NAMESPACE }}"
      IMAGE_NAME: "{{ .IMAGE_NAME }}"
      TAG: '{{ .TAG | default "latest" }}'
      GITHUB_TOKEN: "{{ .GITHUB_TOKEN }}"
      GITHUB_USER: "{{ .GITHUB_USER }}"
      MANIFEST_PATH: '{{ .MANIFEST_PATH | default "./manifest.json" }}'
      ARM64_HASH:
        sh: |
          if [ -f "{{ .MANIFEST_PATH }}" ]; then
            jq -r '.builds[] | select(.name == "arm64") | .artifact_id' {{ .MANIFEST_PATH }}
          else
            echo "Error: Manifest file not found at {{ .MANIFEST_PATH }}" >&2
            exit 1
          fi
      AMD64_HASH:
        sh: |
          if [ -f "{{ .MANIFEST_PATH }}" ]; then
            jq -r '.builds[] | select(.name == "amd64") | .artifact_id' {{ .MANIFEST_PATH }}
          else
            echo "Error: Manifest file not found at {{ .MANIFEST_PATH }}" >&2
            exit 1
          fi
    cmds:
      - |
        # Check if jq is installed
        if ! command -v jq &> /dev/null; then
          echo "Error: jq is not installed. Please install jq to parse JSON files."
          exit 1
        fi

        # Check if manifest file exists
        if [ ! -f "{{ .MANIFEST_PATH }}" ]; then
          echo "Error: Manifest file not found at {{ .MANIFEST_PATH }}"
          exit 1
        fi

        # Display the extracted hashes
        echo "Extracted hashes from manifest:"
        echo "ARM64_HASH: {{ .ARM64_HASH }}"
        echo "AMD64_HASH: {{ .AMD64_HASH }}"
      - task: docker:push-multi-arch
        vars:
          REGISTRY: "{{ .REGISTRY }}"
          NAMESPACE: "{{ .NAMESPACE }}"
          IMAGE_NAME: "{{ .IMAGE_NAME }}"
          TAG: "{{ .TAG }}"
          ARM64_HASH: "{{ .ARM64_HASH }}"
          AMD64_HASH: "{{ .AMD64_HASH }}"
          GITHUB_TOKEN: "{{ .GITHUB_TOKEN }}"
          GITHUB_USER: "{{ .GITHUB_USER }}"
