---
name: Warpgate Image Builder
on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [main]

concurrency:
  cancel-in-progress: true
  group: "${{ github.workflow }}"

env:
  DEBIAN_FRONTEND: noninteractive
  GO_VERSION: 1.24.0
  PACKER_LOG: 1
  PACKER_LOG_PATH: /tmp/packer.log
  PACKER_PLUGIN_PATH: /tmp/packer-plugins
  PACKER_TMP_DIR: /tmp/packer-files
  PACKER_VERSION: latest
  PYTHON_VERSION: 3.12.6
  RUNZERO_DOWNLOAD_TOKEN: ${{ secrets.RUNZERO_DOWNLOAD_TOKEN }}
  TASK_X_REMOTE_TASKFILES: 1
  TASK_VERSION: 3.38.0
  TZ: UTC

# Required for OIDC
permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  image-builder:
    name: Build container images
    strategy:
      matrix:
        template:
          - name: sliver
            namespace: l50
            vars: "arsenal_repo_path=${HOME}/ansible-collection-arsenal workstation_repo_path=${HOME}/CowDogMoo/ansible-collection-workstation template_name=sliver"
          - name: atomic-red-team
            namespace: l50
            vars: "provision_repo_path=${HOME}/ansible-collection-arsenal template_name=atomic-red-team"
          - name: attack-box
            namespace: l50
            vars: "provision_repo_path=${HOME}/ansible-collection-arsenal template_name=attack-box"
          - name: runzero-explorer
            namespace: cowdogmoo
            vars: "provision_repo_path=${HOME}/ansible-collection-bulwark template_name=runzero-explorer"
          - name: ttpforge
            namespace: l50
            vars: "provision_repo_path=${HOME}/ansible-collection-arsenal template_name=ttpforge"
        architecture:
          - arch: amd64
            runner: ubuntu-latest
            platform: linux/amd64
          - arch: arm64
            runner: ubuntu-24.04-arm # Free ARM64 runner for public repos
            platform: linux/arm64
      fail-fast: false
    runs-on: ${{ matrix.architecture.runner }}
    steps:
      - name: Install Node.js for local development
        if: github.actor == 'nektos/act'
        run: |
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # # QEMU is only needed for cross-platform builds
      # - name: Setup QEMU
      #   if: matrix.architecture.arch == 'amd64'
      #   uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Configure Docker for Packer builds
        run: |
          # Create a temp directory that Docker can access
          sudo mkdir -p ${{ env.PACKER_TMP_DIR }}
          sudo chmod 777 ${{ env.PACKER_TMP_DIR }}

          # Configure Docker when running inside act
          if [ "${{ github.actor }}" == "nektos/act" ]; then
            # Configure Docker for local act execution
            echo "Running in act environment, configuring Docker..."

            # Create Docker config directory if it doesn't exist
            mkdir -p ~/.docker

            # Configure Docker daemon to allow access to tmp directories
            cat > /tmp/docker-daemon.json <<EOF
            {
              "features": {
                "buildkit": true
              },
              "experimental": true,
              "mountpoints": {
                "/tmp": {
                  "source": "/tmp",
                  "destination": "/tmp",
                  "options": ["rbind"]
                },
                "/root/.config/packer": {
                  "source": "${{ env.PACKER_TMP_DIR }}",
                  "destination": "/root/.config/packer",
                  "options": ["rbind"]
                }
              }
            }
          EOF

            # Apply the Docker configuration
            sudo mkdir -p /etc/docker
            sudo cp /tmp/docker-daemon.json /etc/docker/daemon.json

            # Restart Docker to apply changes
            sudo systemctl restart docker || true

            # Wait for Docker to be ready
            timeout 15 sh -c "until docker info >/dev/null 2>&1; do sleep 1; done"

            # Verify Docker configuration
            docker info

            # Set Packer environment variables
            mkdir -p ${{ env.PACKER_PLUGIN_PATH }}
            chmod 777 ${{ env.PACKER_PLUGIN_PATH }}
          fi

      - name: Cache Docker layers
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ matrix.architecture.arch }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.architecture.arch }}-buildx-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential \
                                  btrfs-progs \
                                  fuse-overlayfs \
                                  libgpgme-dev \
                                  libbtrfs-dev \
                                  pkg-config \
                                  slirp4netns \
                                  uidmap \
                                  jq
          export XDG_RUNTIME_DIR=/run/user/$(id -u)
          export XDG_CONFIG_HOME=/root/.config
          export XDG_DATA_HOME=/root/.local/share
          echo "export XDG_RUNTIME_DIR=/run/user/$(id -u)" >> $GITHUB_ENV
          echo "export XDG_CONFIG_HOME=/root/.config" >> $GITHUB_ENV
          echo "export XDG_DATA_HOME=/root/.local/share" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install ansible
        run: python3 -m pip install ansible

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PACKER_VERSION }}

      - name: Free up disk space
        if: github.actor != 'nektos/act'
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Configure containers storage to use vfs driver and ignore chown errors
        run: |
          sudo rm -rf /var/lib/containers/storage
          sudo rm -rf /root/.local/share/containers/storage

          sudo mkdir -p /root/.config/containers
          sudo mkdir -p /root/.local/share/containers/storage/vfs/dir

          sudo bash -c 'cat <<EOF > /root/.config/containers/storage.conf
          [storage]
            driver = "vfs"
            runroot = "/run/user/$(id -u)/containers"
            graphroot = "/root/.local/share/containers/storage"
          [storage.options]
            mount_program = "/usr/bin/fuse-overlayfs"
          [storage.options.overlay]
            ignore_chown_errors = "true"
          EOF'

      - name: Clone ansible-collection repositories
        run: |
          mkdir -p $HOME/CowDogMoo
          git clone https://github.com/CowDogMoo/ansible-collection-workstation.git $HOME/CowDogMoo/ansible-collection-workstation
          git clone https://github.com/l50/ansible-collection-arsenal.git $HOME/ansible-collection-arsenal
          git clone https://github.com/l50/ansible-collection-bulwark.git $HOME/ansible-collection-bulwark

      - name: Install ansible collections
        run: |
          # Create the ansible collections directory
          mkdir -p $HOME/.ansible/collections

          # Build and install CowDogMoo workstation collection
          cd $HOME/CowDogMoo/ansible-collection-workstation
          ansible-galaxy collection build --force
          ansible-galaxy collection install \
            cowdogmoo-workstation-*.tar.gz \
            -p $HOME/.ansible/collections \
            --force \
            --pre

          # Build and install l50 arsenal collection
          cd $HOME/ansible-collection-arsenal
          ansible-galaxy collection build --force
          ansible-galaxy collection install \
            l50-arsenal-*.tar.gz \
            -p $HOME/.ansible/collections \
            --force \
            --pre

          # Build and install l50 bulwark collection
          cd $HOME/ansible-collection-bulwark
          ansible-galaxy collection build --force
          ansible-galaxy collection install \
            l50-bulwark-*.tar.gz \
            -p $HOME/.ansible/collections \
            --force \
            --pre

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ghcr.io
          username: l50
          password: ${{ secrets.WG_IMAGE_BUILDER_PAT }}

      - name: Setup go-task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin v${{ env.TASK_VERSION }}
          task --version

      - name: Initialize image template
        run: |
          task -y template-init \
            TEMPLATE_NAME="${{ matrix.template.name }}" \
            ONLY="${{ matrix.blueprint.name }}-docker.docker.*"

      - name: Build image for ${{ matrix.architecture.arch }}
        run: |
          # Create required directories with proper permissions if they don't exist
          if [ ! -d "${{ env.PACKER_TMP_DIR }}" ]; then
            sudo mkdir -p ${{ env.PACKER_TMP_DIR }}
            sudo chmod 777 ${{ env.PACKER_TMP_DIR }}
          fi

          if [ ! -d "${{ env.PACKER_PLUGIN_PATH }}" ]; then
            sudo mkdir -p ${{ env.PACKER_PLUGIN_PATH }}
            sudo chmod 777 ${{ env.PACKER_PLUGIN_PATH }}
          fi

          # Build only for the specific architecture
          timeout 2h task -y template-build \
            TEMPLATE_NAME="${{ matrix.template.name }}" \
            ONLY="${{ matrix.template.name }}-docker.docker.${{ matrix.architecture.arch }}" \
            VARS="${{ matrix.template.vars }}"

      # Push the architecture-specific image by digest
      - name: Push ${{ matrix.architecture.arch }} image by digest
        id: push
        run: |
          task -y template-push-digest \
            NAMESPACE="${{ matrix.template.namespace }}" \
            IMAGE_NAME="${{ matrix.template.name }}" \
            ARCH="${{ matrix.architecture.arch }}" \
            GITHUB_TOKEN="${{ secrets.WG_IMAGE_BUILDER_PAT }}" \
            GITHUB_USER="l50"

      # Upload digest info as artifact for the merge job
      - name: Upload digest
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: digests-${{ matrix.template.name }}-${{ matrix.architecture.arch }}
          path: |
            digest-${{ matrix.template.name }}-${{ matrix.architecture.arch }}.txt
          retention-days: 1

  # Merge the multi-arch manifests
  merge-manifests:
    name: Create and push multi-arch manifest
    runs-on: ubuntu-latest
    needs: image-builder
    strategy:
      matrix:
        template:
          - name: sliver
            namespace: l50
          - name: atomic-red-team
            namespace: l50
          - name: attack-box
            namespace: l50
          - name: runzero-explorer
            namespace: cowdogmoo
          - name: ttpforge
            namespace: l50
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download digests
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          pattern: digests-${{ matrix.template.name }}-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ghcr.io
          username: l50
          password: ${{ secrets.WG_IMAGE_BUILDER_PAT }}

      - name: Setup go-task
        uses: rnorton5432/setup-task@eec4717ae80f02d1614a4fecfa4a55d507768696 # v1.0.0
        with:
          task-version: ${{ env.TASK_VERSION }}

      - name: Create multi-arch manifest
        run: |
          task -y template-create-manifest \
            NAMESPACE="${{ matrix.template.namespace }}" \
            IMAGE_NAME="${{ matrix.template.name }}" \
            GITHUB_TOKEN="${{ secrets.WG_IMAGE_BUILDER_PAT }}" \
            GITHUB_USER="l50"

      - name: Verify multi-arch image
        run: |
          echo "Inspecting manifest for ghcr.io/${{ matrix.template.namespace }}/${{ matrix.template.name }}:latest"
          docker buildx imagetools inspect "ghcr.io/${{ matrix.template.namespace }}/${{ matrix.template.name }}:latest"
