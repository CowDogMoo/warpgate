---
name: Warpgate Image Builder
on:
  workflow_dispatch:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_DEFAULT_REGION: us-west-1
  DEBIAN_FRONTEND: noninteractive
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
  PRODUCT_VERSION: latest
  RUNZERO_DOWNLOAD_TOKEN: ${{ secrets.RUNZERO_DOWNLOAD_TOKEN }}
  TZ: UTC

# Required for OIDC
permissions:
  id-token: write
  contents: read

jobs:
  generate-blueprints:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6

      - name: Set up Go
        uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5
        with:
          go-version: "1.22"
          cache-dependency-path: "**/*.sum"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential \
                                  btrfs-progs \
                                  libgpgme-dev \
                                  libbtrfs-dev \
                                  pkg-config

      - name: Setup warpgate
        run: |
          go mod tidy
          go build -o wg
          sudo mv wg /usr/local/bin/wg

      - name: Generate list of blueprints
        id: set-matrix
        run: |
          blueprint_list=$(wg blueprint list | grep -E '^[a-zA-Z0-9_-]+$')
          matrix_json=$(echo "$blueprint_list" | jq -R -s --arg HOME "$HOME" --arg PWD "$PWD" 'split("\n")[:-1] | map({blueprint: ., path: ($PWD + "/blueprints/" + .)})' | jq -c .)
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

  image-builder:
    needs: generate-blueprints
    name: Build container images using warpgate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        blueprint: ${{fromJson(needs.generate-blueprints.outputs.matrix)}}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
          role-session-name: WarpgateAMIBuilder

      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3

      - name: Cache Docker layers
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Go
        uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5
        with:
          go-version: "1.22"
          cache-dependency-path: "**/*.sum"

      - name: Cache Go Modules
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            ${{ runner.os }}-go-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential \
                                  btrfs-progs \
                                  libgpgme-dev \
                                  libbtrfs-dev \
                                  pkg-config

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Setup warpgate
        run: |
          go mod tidy
          go build -o wg
          sudo mv wg /usr/local/bin/wg

      - name: Clone ansible-collection repositories
        run: |
          git clone https://github.com/CowDogMoo/ansible-collection-workstation.git ${{ github.workspace }}/ansible-collection-workstation
          git clone https://github.com/l50/ansible-collection-arsenal.git ${{ github.workspace }}/ansible-collection-arsenal

      - name: Make repository name lowercase
        id: lower-repo
        run: |
          echo "repo_owner_lowercase=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Reset and configure containers storage
        run: |
          # Clean up any existing storage configuration and files
          sudo podman system reset -f
          sudo rm -rf $HOME/.local/share/containers/storage
          sudo rm -rf $HOME/.config/containers/storage.conf
          sudo rm -rf /var/lib/containers/storage

          # Create the necessary directories
          mkdir -p $HOME/.config/containers
          mkdir -p $HOME/.local/share/containers/storage/vfs/dir

          # Create the storage.conf file
          cat <<EOF > $HOME/.config/containers/storage.conf
          [storage]
            driver = "vfs"
          [storage.options]
            ignore_chown_errors = "true"
          EOF

      - name: Test podman is working
        run: podman run --rm -it alpine sh -c "echo 'Podman container running successfully'"

      - name: Run image builder for each blueprint
        run: |
          blueprint_name="${{ matrix.blueprint.blueprint }}"
          export RUNZERO_DOWNLOAD_TOKEN="${{ secrets.RUNZERO_DOWNLOAD_TOKEN }}"
          provision_path=""

          echo "Blueprint name: ${{ matrix.blueprint.blueprint }}"
          if [[ "${{ matrix.blueprint.blueprint }}" == "runzero-explorer" ]]; then
            provision_path="${{ github.workspace }}/ansible-collection-workstation"
          elif [[ "${{ matrix.blueprint.blueprint }}" == "sliver" || "${{ matrix.blueprint.blueprint }}" == "ttpforge" || "${{ matrix.blueprint.blueprint }}" == "atomic-red-team" ]]; then
            provision_path="${{ github.workspace }}/ansible-collection-arsenal"
          else
            echo "Unknown blueprint: ${{ matrix.blueprint.blueprint }}"
            exit 1
          fi

          # Run the wg imageBuilder command with the correct paths for the current matrix blueprint.
          timeout 2h wg imageBuilder \
            -b "$blueprint_name" \
            -p "$provision_path" \
            -t "${{ secrets.BOT_TOKEN }}"
        working-directory: ${{ github.workspace }}

      - name: Run tmate if a failure occurs
        if: failure()
        uses: mxschmitt/action-tmate@a283f9441d2d96eb62436dc46d7014f5d357ac22 # v3
