---
name: Warpgate Image Builder
on:
  workflow_dispatch:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_DEFAULT_REGION: us-west-1
  DEBIAN_FRONTEND: noninteractive
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
  PRODUCT_VERSION: latest
  RUNZERO_DOWNLOAD_TOKEN: ${{ secrets.RUNZERO_DOWNLOAD_TOKEN }}
  TZ: UTC

# Required for OIDC
permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  generate-blueprints:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@5d869da34e18e7287c1daad50e0b8ea0f506ce69 # v1.11.0
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential \
                                  btrfs-progs \
                                  fuse-overlayfs \
                                  libgpgme-dev \
                                  libbtrfs-dev \
                                  pkg-config \
                                  slirp4netns \
                                  uidmap
          export XDG_RUNTIME_DIR=/run/user/$(id -u)
          export XDG_CONFIG_HOME=/root/.config
          export XDG_DATA_HOME=/root/.local/share
          echo "export XDG_RUNTIME_DIR=/run/user/$(id -u)" >> $GITHUB_ENV
          echo "export XDG_CONFIG_HOME=/root/.config" >> $GITHUB_ENV
          echo "export XDG_DATA_HOME=/root/.local/share" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5
        with:
          go-version: "1.22"
          cache-dependency-path: "**/*.sum"

      - name: Install yq
        run: go install github.com/mikefarah/yq/v4@latest

      - name: Setup warpgate
        run: |
          go mod tidy
          go build -o wg
          sudo mv wg /usr/local/bin/wg

      - name: Generate list of blueprints
        id: set-matrix
        run: |
          blueprint_list=$(wg blueprint list | grep -E '^[a-zA-Z0-9_-]+$')
          matrix_json=$(echo "$blueprint_list" | jq -R -s --arg HOME "$HOME" --arg PWD "$PWD" 'split("\n")[:-1] | map({blueprint: ., path: ($PWD + "/blueprints/" + .)})' | jq -c .)
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

  image-builder:
    needs: generate-blueprints
    name: Build container images using warpgate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        blueprint: ${{fromJson(needs.generate-blueprints.outputs.matrix)}}
      fail-fast: false
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@5d869da34e18e7287c1daad50e0b8ea0f506ce69 # v1.11.0
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
          role-session-name: WarpgateAMIBuilder
          role-duration-seconds: 7200

      - name: Set up QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3

      - name: Cache Docker layers
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential \
                                  btrfs-progs \
                                  fuse-overlayfs \
                                  libgpgme-dev \
                                  libbtrfs-dev \
                                  pkg-config \
                                  slirp4netns \
                                  uidmap
          export XDG_RUNTIME_DIR=/run/user/$(id -u)
          export XDG_CONFIG_HOME=/root/.config
          export XDG_DATA_HOME=/root/.local/share
          echo "export XDG_RUNTIME_DIR=/run/user/$(id -u)" >> $GITHUB_ENV
          echo "export XDG_CONFIG_HOME=/root/.config" >> $GITHUB_ENV
          echo "export XDG_DATA_HOME=/root/.local/share" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5
        with:
          go-version: "1.22"
          cache-dependency-path: "**/*.sum"

      - name: Restore Go Modules cache
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            ${{ runner.os }}-go-

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Setup warpgate
        run: |
          go mod tidy
          go build -o wg
          sudo mv wg /usr/local/bin/wg

      - name: Clone ansible-collection repositories
        run: |
          git clone https://github.com/CowDogMoo/ansible-collection-workstation.git ${{ github.workspace }}/ansible-collection-workstation
          git clone https://github.com/l50/ansible-collection-arsenal.git ${{ github.workspace }}/ansible-collection-arsenal

      - name: Make repository name lowercase
        id: lower-repo
        run: |
          echo "repo_owner_lowercase=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Configure containers storage to use vfs driver and ignore chown errors
        run: |
          sudo rm -rf /var/lib/containers/storage
          sudo rm -rf /root/.local/share/containers/storage

          sudo mkdir -p /root/.config/containers
          sudo mkdir -p /root/.local/share/containers/storage/vfs/dir

          sudo bash -c 'cat <<EOF > /root/.config/containers/storage.conf
          [storage]
            driver = "vfs"
            runroot = "/run/user/$(id -u)/containers"
            graphroot = "/root/.local/share/containers/storage"
          [storage.options]
            mount_program = "/usr/bin/fuse-overlayfs"
          [storage.options.overlay]
            ignore_chown_errors = "true"
          EOF'

      - name: Define provision path function
        id: define-provision-path
        run: |
          set_provision_path() {
            local blueprint=$1
            case $blueprint in
              "runzero-explorer")
                echo "${{ github.workspace }}/ansible-collection-workstation"
                ;;
              "sliver" | "ttpforge" | "atomic-red-team" | "attack-box") # , "windows")
                echo "${{ github.workspace }}/ansible-collection-arsenal"
                ;;
              "test")
                echo "${{ matrix.blueprint.path }}/scripts/provision.sh"
                ;;
              *)
                echo "Unknown blueprint: $blueprint" >&2
                exit 1
                ;;
            esac
          }

          blueprint_name="${{ matrix.blueprint.blueprint }}"
          provision_path=$(set_provision_path $blueprint_name)
          echo "Blueprint name: $blueprint_name"
          echo "Provision path: $provision_path"

          echo "${{ steps.app-token.outputs.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          echo "provision_path=$provision_path" >> $GITHUB_ENV

      - name: Run image builder for each blueprint
        run: |
          blueprint_name="${{ matrix.blueprint.blueprint }}"
          export RUNZERO_DOWNLOAD_TOKEN="${{ secrets.RUNZERO_DOWNLOAD_TOKEN }}"
          provision_path=$provision_path
          tag_name=$(yq e '.blueprint.tag.name' "${{ matrix.blueprint.path }}/config.yaml")
          repo_owner=$(echo "$tag_name" | cut -d'/' -f1)

          echo "Blueprint name: $blueprint_name"
          echo "Provision path: $provision_path"

          echo "${{ steps.app-token.outputs.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          timeout 2h sudo -E wg imageBuilder \
            -b "$blueprint_name" \
            -p "$provision_path" \
            -t "${{ steps.app-token.outputs.token }}"
        working-directory: ${{ github.workspace }}

      - name: Verify pushed images
        if: ${{ !contains(matrix.blueprint.blueprint, 'windows') }} # Skip verification for windows blueprint (not a container image)
        run: |
          echo "${{ steps.app-token.outputs.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          blueprint_name="${{ matrix.blueprint.blueprint }}"
          tag_name=$(yq e '.blueprint.packer_templates.tag.name' "${{ matrix.blueprint.path }}/config.yaml")
          repo_owner=$(echo "$tag_name" | cut -d'/' -f1)
          image_name="ghcr.io/$repo_owner/$blueprint_name:latest"
          echo "Verifying image: $image_name"
          docker pull "$image_name"
